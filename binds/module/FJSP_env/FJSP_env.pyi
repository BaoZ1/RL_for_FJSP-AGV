from typing import ClassVar, overload

class AGV:
    def __init__(self, *args, **kwargs) -> None: ...

class AGVStatus:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    idle: ClassVar[AGVStatus] = ...
    moving: ClassVar[AGVStatus] = ...
    picking: ClassVar[AGVStatus] = ...
    transporting: ClassVar[AGVStatus] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Action:
    AGV_id: int
    action_type: ActionType
    target_machine: int
    target_product: Product | None
    @overload
    def __init__(self, action_type: ActionType, AGV_id: int, target_machine: int) -> None: ...
    @overload
    def __init__(self, action_type: ActionType, AGV_id: int, target_machine: int, target_product: Product) -> None: ...

class ActionType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    move: ClassVar[ActionType] = ...
    pick: ClassVar[ActionType] = ...
    transport: ClassVar[ActionType] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Graph:
    AGV_feature_size: ClassVar[int] = ...  # read-only
    begin_operation_id: ClassVar[int] = ...  # read-only
    dummy_machine_id: ClassVar[int] = ...  # read-only
    end_operation_id: ClassVar[int] = ...  # read-only
    machine_feature_size: ClassVar[int] = ...  # read-only
    operation_feature_size: ClassVar[int] = ...  # read-only
    def __init__(self) -> None: ...
    def act(self, action: Action) -> Graph: ...
    def add_AGV(self, speed: float, init_pos: int) -> int: ...
    def add_machine(self, machine_type: int) -> int: ...
    def copy(self) -> Graph: ...
    def features(self) -> GraphFeature: ...
    def finish_time_lower_bound(self) -> float: ...
    def finished(self) -> bool: ...
    def get_AGV(self, AGV_id: int) -> AGV: ...
    def get_available_actions(self) -> list[Action]: ...
    def get_machine(self, machine_id: int) -> Machine: ...
    def get_operation(self, operation_id: int) -> Operation: ...
    def get_timestamp(self) -> float: ...
    def get_travel_time(self, _from: int, to: int, agv: int) -> float: ...
    def init(self) -> None: ...
    def insert_operation(self, machine_type: int, process_time: float, predecessors: int | None = ..., successors: int | None = ...) -> int: ...
    @staticmethod
    def rand_generate(operation_count: int, machine_count: int, AGV_count: int, machine_type_count: int, min_transport_time: float, max_transport_time: float, min_max_speed_ratio: float, min_process_time: float, max_process_time: float) -> Graph: ...
    def remove_operation(self, operation_id: int) -> None: ...
    @overload
    def set_distance(self, _from: int, to: int, distance: float) -> None: ...
    @overload
    def set_distance(self, data: dict[int, dict[int, float]]) -> None: ...
    def set_rand_distance(self, min_dist: float, max_dist: float) -> None: ...
    def wait(self, delta_time: float) -> Graph: ...

class GraphFeature:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def AGV_features(self) -> list[tuple[float, float, float, float, float]]: ...
    @property
    def AGV_loaded(self) -> list[tuple[int, int, int]]: ...
    @property
    def AGV_position(self) -> list[tuple[int, int]]: ...
    @property
    def AGV_target(self) -> list[tuple[int, int, float]]: ...
    @property
    def machine_features(self) -> list[tuple[float, float, float, float, float, float, float]]: ...
    @property
    def operation_features(self) -> list[tuple[float, float, float, float, float, float, float, float]]: ...
    @property
    def predecessor_idx(self) -> list[tuple[int, int]]: ...
    @property
    def processable_idx(self) -> list[tuple[int, int]]: ...
    @property
    def processing(self) -> list[tuple[int, int, float]]: ...
    @property
    def successor_idx(self) -> list[tuple[int, int]]: ...
    @property
    def waiting(self) -> list[tuple[int, int, int, int]]: ...

class Machine:
    def __init__(self, *args, **kwargs) -> None: ...

class MachineStatus:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    idle: ClassVar[MachineStatus] = ...
    waiting_material: ClassVar[MachineStatus] = ...
    working: ClassVar[MachineStatus] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Operation:
    def __init__(self, *args, **kwargs) -> None: ...

class OperationStatus:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    blocked: ClassVar[OperationStatus] = ...
    finished: ClassVar[OperationStatus] = ...
    waiting: ClassVar[OperationStatus] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Product:
    def __init__(self, *args, **kwargs) -> None: ...
